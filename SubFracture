using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SmartFracture : MonoBehaviour
{
    public float breakRadius = 0.2f;
    public float breakForce = 100;
    public GameObject heldObject;  // Объект, который игрок держит в руке

    private List<SubFracture> cells;

    void Start()
    {
        InitSubFractures();
    }

    void InitSubFractures()
    {
        cells = new List<SubFracture>();
        cells.AddRange(transform.GetComponentsInChildren<SubFracture>());

        foreach (SubFracture cell in cells)
        {
            BoxCollider tempCollider = cell.gameObject.AddComponent<BoxCollider>();
            tempCollider.size *= 2.4f;

            Collider[] hitColliders = Physics.OverlapBox(cell.transform.position, tempCollider.size / 2, cell.transform.rotation);
            int i = 0;

            while (i < hitColliders.Length)
            {
                if (hitColliders[i].GetComponent<SubFracture>() && hitColliders[i].transform.root == cell.transform.root && hitColliders[i].gameObject != cell.gameObject)
                {
                    cell.connections.Add(hitColliders[i].GetComponent<SubFracture>());
                    hitColliders[i].GetComponent<SubFracture>().connections.Add(cell);
                    UnityEngine.Debug.Log(cell.name + "_" + hitColliders[i].name);

                }
                i++;
            }

            Destroy(tempCollider);
        }
    }

  public void Fracture(Vector3 point, Vector3 force)
    {
        foreach (SubFracture cell in cells)
        {
            // Проверяем, держит ли игрок объект с тэгом "Bit"
            if (heldObject != null && heldObject.CompareTag("Bit"))
            {
                // Разрушаем только при наличии тэга "Bit"
                cell.connections = new List<SubFracture>();
                cell.grounded = false;
                cell.GetComponent<Rigidbody>().isKinematic = false;
                cell.GetComponent<Rigidbody>().AddForceAtPosition(force, point, ForceMode.Force);
            }
        }
    }
}











using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SubFracture : MonoBehaviour
{
    public bool grounded;
    public bool connected;

    public List<SubFracture> connections;

    private SmartFracture parent;

    private void Start()
    {
        parent = transform.root.GetComponent<SmartFracture>();
        GetComponent<Rigidbody>().isKinematic = true;
    }

    void Update()
    {
        for (int i = 0; i < connections.Count; i++) // Make sure it is not isolated
        {
            if (!connections[i].grounded && !connections[i].connected)
            {
                connections.Remove(connections[i]);
            }
        }

        bool somehowGrounded = false;

        for (int i = 0; i < connections.Count; i++) // Make sure it is connect to a ground some way or another
        {
            if (connections[i].grounded)
            {
                somehowGrounded = true;
                break;
            }

            for (int i2 = 0; i2 < connections[i].connections.Count; i2++) // Check one more iteration through
            {
                if (connections[i].connections[i2].grounded)
                {
                    somehowGrounded = true;
                    break;
                }
                for (int i3 = 0; i3 < connections[i2].connections[i].connections.Count; i3++)
                {
                    if (connections[i].connections[i2].connections[i3].grounded)
                    {
                        somehowGrounded = true;
                        break;
                    }
                    for (int i4= 0; i4 < connections[i3].connections[i2].connections[i].connections.Count; i4++)
                    {
                        if (connections[i].connections[i2].connections[i3].connections[i4].grounded)
                        {
                            somehowGrounded = true;
                            break;
                        }
                    }
                }
            }
        }

        connected = somehowGrounded && connections.Count >= 1 || grounded;

        GetComponent<Rigidbody>().isKinematic = connected;
    }

    void OnCollisionEnter(Collision collision)
    {
        if (parent == null)
        {
            UnityEngine.Debug.Log("Your debug message here.");
            return;
        }

        // Проверяем, что столкновение произошло с объектом с тэгом "Bit"
        if (collision.collider.CompareTag("Bit"))
        {
            // Разрушаем при соприкосновении с Bit
            parent.Fracture(collision.contacts[0].point, collision.impulse);
        }
    }


    private void OnDrawGizmosSelected()
    {
        for (int i = 0; i < connections.Count; i++)
        {
            Gizmos.DrawLine(transform.position, connections[i].transform.position);
        }
    }
}
